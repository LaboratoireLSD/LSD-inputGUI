"""
.. module:: pluginViewer

.. codeauthor::  Mathieu Gagnon <mathieu.gagnon.10@ulaval.ca>

:Created on: 2010-04-06

"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newPopTab_mockup1b.ui'
#
# Created: Tue Apr  6 11:48:47 2010
#      by: PyQt4 UI code generator 4.7
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui
from model.PopModel import PopModel, PopModelSim
from frame.restriction import Ui_Dialog as RestrictionDialog
from frame.ProfileManager import Ui_Dialog as ProfileMgrDialog
from model.baseVarModel import GeneratorBaseModel


class Ui_population(object):
    '''
    This class is an automatically generated python file using the pyuic4 program and .ui file generated by Qt_Designer.
    This class is the mainWindow's tab containing the population information of the simulation.
    '''
    def __init__(self, parent):
        '''
        Constructor.
        
        :param parent: Application's main window
        '''
        self.parent = parent
        
    def setupUi(self, Form):
        """
        Creates the widgets that will be displayed on the frame.
        
        :param Form: Visual frame.
        :type Form: :class:`.MyWidgetTabPopulation`
        """
        Form.setObjectName("Form")
        #Creating layouts and main widgets
        self.mainLayout = QtGui.QVBoxLayout()
        self.frame = QtGui.QSplitter()
        self.frame.setObjectName("frame")
        
        #Creating widget ant layout that will be in left part of the splitter
        self.layout_1 = QtGui.QVBoxLayout()
        self.container_1 = QtGui.QWidget(self.frame)
        #Creating the population tableView
        self.tableView = QtGui.QTableView()
        self.tableView.setObjectName("tableView")
        #Its label
        self.label = QtGui.QLabel()
        self.label.setObjectName("label")
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setWeight(75)
        font.setBold(True)
        self.label.setFont(font)
        #Its buttons
        self.buttonLayout_demography = QtGui.QHBoxLayout()
        self.pushButton_Eval_Function = QtGui.QPushButton("Individuals to keep")
        self.pushButton_Eval_Function.setFixedHeight(25)
        self.pushButton_Eval_Function.setFixedWidth(150)
        self.buttonLayout_demography.addWidget(self.pushButton_Eval_Function)
        self.buttonLayout_demography.addItem(QtGui.QSpacerItem(100, 30, QtGui.QSizePolicy.Expanding))
        #Building it all up
        self.layout_1.addWidget(self.label)
        self.layout_1.addWidget(self.tableView)
        self.layout_1.addLayout(self.buttonLayout_demography)
        self.container_1.setLayout(self.layout_1)
        
        #Creating widget and layout that will be in the right part of the splitter
        self.layout_2 = QtGui.QVBoxLayout()
        self.container_2 = QtGui.QWidget(self.frame)
        #Creating the simulation population tableView
        self.tableView_Supp = ArrowsAwareTableView()
        self.tableView_Supp.setObjectName("tableView_Supp")
        self.tableView_Supp.horizontalHeader().setSortIndicator(0,QtCore.Qt.AscendingOrder)
        self.tableView_Supp.setSortingEnabled(True)
        #Its label
        self.label_2 = QtGui.QLabel()
        self.label_2.setObjectName("label_2")
        self.label_2.setFont(font)
        #Its buttons
        self.buttonLayout = QtGui.QHBoxLayout()
        self.pushButton_Add_Sim_Variable = QtGui.QPushButton("Add")
        self.pushButton_Add_Sim_Variable.setFixedSize(QtCore.QSize(77,25))
        self.pushButton_Delete_Sim_Variable = QtGui.QPushButton("Delete")
        self.pushButton_Delete_Sim_Variable.setFixedSize(QtCore.QSize(77,25))
        #The buttons's layout
        self.buttonLayout.addWidget(self.pushButton_Add_Sim_Variable)
        self.buttonLayout.addWidget(self.pushButton_Delete_Sim_Variable)
        self.buttonLayout.addItem(QtGui.QSpacerItem(100, 30, QtGui.QSizePolicy.Expanding))
        #Building it all up
        self.layout_2.addWidget(self.label_2)
        self.layout_2.addWidget(self.tableView_Supp)
        self.layout_2.addLayout(self.buttonLayout)
        self.container_2.setLayout(self.layout_2)
        
        #Top part
        self.layoutTop = QtGui.QVBoxLayout()
        
        self.comboBox = QtGui.QComboBox()
        self.comboBox.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToContents)
        self.comboBox.setSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Fixed)
        self.comboBox.setFixedHeight(25)
        self.comboBox.setObjectName("comboBox")
        
        self.pushButton_edit = QtGui.QPushButton("Edit profile(s)")
        self.pushButton_edit.setFixedSize(QtCore.QSize(150,25))
        self.layoutTop.addWidget(self.comboBox)
        self.layoutTop.addWidget(self.pushButton_edit)
        self.layoutTop.setMargin(5)
        
        self.retranslateUi(Form)
       
        #Layout instructions added by me
        self.mainLayout.addLayout(self.layoutTop)
        #self.mainLayout.addSpacing(10)
        self.mainLayout.addWidget(self.frame)
        Form.setLayout(self.mainLayout)
        self.mainLayout.setMargin(50)
        #Size constraints
        self.layoutTop.setSpacing(10)
        
        #Simulation variables tableView preferences
        self.tableView_Supp.setDragEnabled(True)
        self.tableView_Supp.setAcceptDrops(True)
        self.tableView_Supp.setDropIndicatorShown(True)
        self.tableView_Supp.setDragDropMode(QtGui.QAbstractItemView.InternalMove)
        self.tableView_Supp.setDefaultDropAction(QtCore.Qt.DropAction(QtCore.Qt.MoveAction))
        self.tableView_Supp.setDragDropOverwriteMode(False)
        
        #Connections
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.connect(self.pushButton_edit,QtCore.SIGNAL("clicked()"),self.editProfiles)
        self.connect(self.comboBox,QtCore.SIGNAL("currentIndexChanged(int)"),self.changeDemography)
        self.connect(self.pushButton_Eval_Function,QtCore.SIGNAL("clicked()"),self.evalFunction)
        self.connect(self.pushButton_Add_Sim_Variable,QtCore.SIGNAL("clicked()"),self.addVariable)
        self.connect(self.pushButton_Delete_Sim_Variable,QtCore.SIGNAL("clicked()"),self.deleteVariable)
        self.connect(self.tableView_Supp,QtCore.SIGNAL("deleteVariable()"),self.deleteVariable)
        
    def retranslateUi(self, Form):
        '''
        Function allowing naming of the different labels regardless of app's language.
        
        :param Form: Visual frame to translate.
        :type Form: :class:`.MyWidgetTabPopulation`
        '''
        Form.setWindowTitle(QtGui.QApplication.translate("Form", "Form", None, QtGui.QApplication.UnicodeUTF8))
        self.label.setText(QtGui.QApplication.translate("Form", "Population variables :", None, QtGui.QApplication.UnicodeUTF8))
        self.label_2.setText(QtGui.QApplication.translate("Form", "Event variables :", None, QtGui.QApplication.UnicodeUTF8))
       
            
    def changeDemography(self,index):
        '''
        Changes the two tableViews when a user changes the profile in the comboBox.
        
        :param index: the index of the newly selected profile
        :type index: QModelIndex
        '''
        if self.comboBox.count():
            profileName = self.comboBox.itemData(index, QtCore.Qt.UserRole)
            baseModel = GeneratorBaseModel()
            newPopModelDemo = PopModel(baseModel, profileName)
            newPopModelSim = PopModelSim(baseModel, profileName)
            self.tableView.setModel(newPopModelDemo)
            self.tableView_Supp.setModel(newPopModelSim)
                
    def addVariable(self):
        '''
        Adds a simulation variable to the currently selected profile.
        '''
        if not self.tableView_Supp.model().baseModel.howManyProfiles():
            QtGui.QMessageBox.information(self, "Add Variable aborted", "Before adding variables, make sure a valid profile is selected!")
            return
        
        if len(self.tableView_Supp.selectedIndexes()) == 1:
            index = self.tableView_Supp.selectedIndexes()[0]
            self.tableView_Supp.model().insertRow(index.row())
        else:
            self.tableView_Supp.model().insertRow(self.tableView_Supp.model().rowCount())
        
    def deleteVariable(self):
        '''
        Removes 1 or many simulation variables from the currently selected profile.
        '''
        if len(self.tableView_Supp.selectedIndexes()) > 1:
            self.tableView_Supp.model().specialRemove([index.row() for index in self.tableView_Supp.selectedIndexes()])
            self.tableView_Supp.clearSelection()
        
        elif len(self.tableView_Supp.selectedIndexes()):
            index = self.tableView_Supp.selectedIndexes()[0]
            self.tableView_Supp.model().removeRow(index.row())
            self.tableView_Supp.clearSelection()
            
    def evalFunction(self):
        '''
        Execute the dialog that allows a user to change the accept function
        '''
        if self.tableView.model() and self.tableView.model().baseModel.howManyProfiles():
            restrictionDialog = EvaluationFunctionDialog(self.tableView.model().profileName,self.parent)
            evalFunctionNode = self.tableView.model().getEvalNode()
            restrictionDialog.parseEntry(evalFunctionNode.cloneNode(True))
            if restrictionDialog.exec_():
                self.tableView.model().baseModel.replaceAcceptFunctionDomNode(self.tableView.model().profileName, restrictionDialog.acceptFuncDom)
            return
        
        QtGui.QMessageBox.information(self, "Accept Function edition aborted!", "Before editing the accept function, make sure a valid profile is selected!")
     
    def editProfiles(self):
        '''
        Pops up the profile manager dialog. See the class :class:`.MyWidgetProfileManager` for more informations.
        '''
        ProfileMgr = MyWidgetProfileManager(self)
        ProfileMgr.exec_()

class EvaluationFunctionDialog(QtGui.QDialog, RestrictionDialog):
    '''
    Transforms the class in the generated python file in an executable dialog.
    This class allow a user to modify the accept function.
    '''
    def __init__(self,profileName, parent):
        QtGui.QDialog.__init__(self)
        RestrictionDialog.__init__(self, profileName, parent)
        self.setupUi(self)
        

class MyWidgetProfileManager(QtGui.QDialog, ProfileMgrDialog):
    '''
    Transforms the class in the generated python file in an executable dialog.
    This class allow a user to manage profiles.
    '''
    def __init__(self, parent):      
        QtGui.QDialog.__init__(self)
        ProfileMgrDialog.__init__(self, parent)
        self.setupUi(self)

class ArrowsAwareTableView(QtGui.QTableView):
    '''
    This class slightly modify Qt's QTableView class.
    Navigating the TableView with arrows will generate the same signal as if the user was using the mouse buttons.
    This way, previews will be generated like the user had clicked in the table view.
    '''
    def __init__(self):
        '''
        Constructor 
        '''
        QtGui.QTableView.__init__(self)
        
    def keyPressEvent(self,event):
        '''
        Reimplementation of QTableView's keyPressEvent function.
        
        :param event: see QTableView's documentation for more information
        '''
        super(ArrowsAwareTableView, self).keyPressEvent(event)
        if event.key() == QtCore.Qt.Key_Delete and not self.state() == QtGui.QAbstractItemView.EditingState:
            self.emit(QtCore.SIGNAL("deleteVariable()"))
