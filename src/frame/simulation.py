"""
.. module:: sensanalysis

.. codeauthor:: Majid Malis

:Created on: 2009-10-15

"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'simulation.ui'
#
# Created: Thu Oct 15 00:55:39 2009
#      by: PyQt4 UI code generator 4.5.2
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui
from editor.mainEditorFrame import  MainEditorWindow


class Ui_simulation(object):
    '''
    This class is an automatically generated python file using the pyuic4 program and .ui file generated by Qt_Designer.
    This class is the mainWindow's tab containing the scenarios and duration information of the simulation.
    '''
    def __init__(self, parent):
        '''
        Constructor.
        
        :param parent: application's mainWindow
        '''
        self.parent = parent
        
    def setupUi(self, simulation):
        """
        Creates the widgets that will be displayed on the frame.
        
        :param simulation: Visual frame.
        :type simulation: :class:`.MyWidgetTabSimulation`
        """
        simulation.setObjectName("simulation")
        #Creating the layouts and splitter
        self.topLayout = QtGui.QHBoxLayout()
        self.splitter = QtGui.QSplitter()
        self.splitter.setSizePolicy(QtGui.QSizePolicy.Expanding,QtGui.QSizePolicy.Expanding)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter_2")
        #MainLayout
        self.mainLayout = QtGui.QVBoxLayout()
        
        #First, create widgets for the top layout
        #Clock Layout
        self.horizontalLayoutClock = QtGui.QHBoxLayout()
        self.verticalLayoutFixed = QtGui.QVBoxLayout()
        self.verticalLayoutConditionnal = QtGui.QVBoxLayout()
        self.horizontalLayoutSpinBox = QtGui.QHBoxLayout()
        self.horizontalLayoutClockButton = QtGui.QHBoxLayout()
        #Fixed Items
        self.radioButton_Fixed = QtGui.QRadioButton()
        self.radioButton_Fixed.setText("Fixed duration")
        self.radioButton_Fixed.setFixedWidth(130)
        self.verticalLayoutFixed.addWidget(self.radioButton_Fixed)
        self.label_3 = QtGui.QLabel()
        self.label_3.setObjectName("label_3")
        self.label_3.setText("Simulation duration : ")
        self.horizontalLayoutSpinBox.addSpacing(25)
        self.horizontalLayoutSpinBox.addWidget(self.label_3)
        self.spinBox_2 = QtGui.QSpinBox()
        self.spinBox_2.setObjectName("spinBox_2")
        self.spinBox_2.setMaximum(2147483647)
        self.horizontalLayoutSpinBox.addWidget(self.spinBox_2)
        self.verticalLayoutFixed.addLayout(self.horizontalLayoutSpinBox)
        #Conditionnal Items
        self.radioButton_Complex = QtGui.QRadioButton()
        self.radioButton_Complex.setText("Conditionnal duration")
        self.radioButton_Complex.setFixedWidth(200)
        self.verticalLayoutConditionnal.addWidget(self.radioButton_Complex)
        self.pushButton_clock = QtGui.QPushButton()
        self.pushButton_clock.setText("Open clock tree")
        self.pushButton_clock.setFixedSize(QtCore.QSize(150,25))
        #self.horizontalLayoutClockButton.addSpacing(10)
        self.horizontalLayoutClockButton.addWidget(self.pushButton_clock)
        self.verticalLayoutConditionnal.addLayout(self.horizontalLayoutClockButton)
        
        self.radioButton_Complex.setChecked(True)
        self.spinBox_2.setEnabled(False)
        #Create units combobox
        self.unitsLabel = QtGui.QLabel("Clock units : ")
        font = QtGui.QFont()
        font.setWeight(75)
        font.setPointSize(10)
        font.setBold(True)
        self.unitsLabel.setFont(font)
        self.unitsComboBox = QtGui.QComboBox()
        self.unitsComboBox.addItems(["day","month","year","week"])
        self.unitsComboBox.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToContents)
        self.unitsComboBox.setSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Fixed)
        self.unitsComboBox.setFixedHeight(25)
        self.unitsLayout = QtGui.QHBoxLayout()
        self.unitsLayout.addWidget(self.unitsLabel)
        self.unitsLayout.addWidget(self.unitsComboBox)
        self.unitsLayout.setAlignment(QtCore.Qt.AlignLeft)
        #Add the widget to the layout
        self.horizontalLayoutClock.addLayout(self.verticalLayoutFixed)
        self.horizontalLayoutClock.addSpacing(20)
        self.horizontalLayoutClock.addLayout(self.verticalLayoutConditionnal)
        self.horizontalLayoutClock.addStretch(0)
        #Create clock label
        self.clockLabel = QtGui.QLabel("Clock : ")
        font = QtGui.QFont()
        font.setWeight(75)
        font.setPointSize(10)
        font.setBold(True)
        self.clockLabel.setFont(font)
        #Vertical Layout that will hold the clock stuff
        self.verticalLayoutClock = QtGui.QVBoxLayout()
        self.verticalLayoutClock.addWidget(self.clockLabel)
        self.verticalLayoutClock.addLayout(self.horizontalLayoutClock)
        self.verticalLayoutClock.addSpacing(10)
        self.verticalLayoutClock.addLayout(self.unitsLayout)
        #Add Clock layout to main Layout
        self.mainLayout.addLayout(self.verticalLayoutClock)
        #Adjust margins to fit with bottom widgets
        self.verticalLayoutClock.setContentsMargins(10, 0, 11, 11)
        #Add the other layout/widget to main layout
        self.mainLayout.addWidget(self.splitter)
        #Splitter        
        self.splitterWidget = QtGui.QWidget(self.splitter)
        self.verticalLayout = QtGui.QVBoxLayout()
        self.splitterWidget.setLayout(self.verticalLayout)
        
        self.label_2 = QtGui.QLabel()
        font = QtGui.QFont()
        font.setWeight(75)
        font.setPointSize(10)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)        
        self.tableView = ArrowsAwareTableView()
        self.tableView.setObjectName("tableView")
        #self.tableView.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        self.tableView.setSizePolicy(QtGui.QSizePolicy.Expanding,QtGui.QSizePolicy.Expanding)
        self.tableView.setSortingEnabled(True)
        self.verticalLayout.addWidget(self.tableView)
        self.horizontalLayout = QtGui.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.add = QtGui.QPushButton()
        self.add.setObjectName("add")
        self.horizontalLayout.addWidget(self.add)
        self.add.setFixedSize(QtCore.QSize(77,25))
        self.delete = QtGui.QPushButton()
        self.delete.setObjectName("delete")
        self.delete.setFixedSize(QtCore.QSize(77,25))
        self.horizontalLayout.addWidget(self.delete)
        self.horizontalLayout.addStretch()
        self.verticalLayout.addLayout(self.horizontalLayout)
        
        #TableView Preferences
        self.tableView.setDragEnabled(True)
        self.tableView.setAcceptDrops(True)
        self.tableView.setDropIndicatorShown(True)
        self.tableView.setDragDropMode(QtGui.QAbstractItemView.InternalMove)
        self.tableView.setDefaultDropAction(QtCore.Qt.DropAction(QtCore.Qt.MoveAction))
        self.tableView.setDragDropOverwriteMode(False)
        
        #Right part of the splitter
        self.splitterWidgetRight = QtGui.QWidget(self.splitter)
        self.verticalLayoutProMgr = QtGui.QVBoxLayout()
        self.splitterWidgetRight.setLayout(self.verticalLayoutProMgr)

        self.label = QtGui.QLabel("Population manager :")
        self.label.setFont(font)
        
        self.tableViewProMgr = QtGui.QTableView()
        self.tableViewProMgr.setObjectName("tableView")
        self.tableViewProMgr.setSizePolicy(QtGui.QSizePolicy.Expanding,QtGui.QSizePolicy.Expanding)
        
        self.horizontalLayoutProMgr = QtGui.QHBoxLayout()
        self.horizontalLayoutProMgr.setObjectName("horizontalLayout")
        self.pushButton = QtGui.QPushButton()
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setFixedSize(QtCore.QSize(120,25))
        self.horizontalLayoutProMgr.addWidget(self.pushButton)
        self.pushButton_2 = QtGui.QPushButton()
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setFixedSize(QtCore.QSize(120,25))
        self.horizontalLayoutProMgr.addWidget(self.pushButton_2)
        self.horizontalLayoutProMgr.addItem(QtGui.QSpacerItem(100, 25, QtGui.QSizePolicy.Expanding))
        
        self.verticalLayoutProMgr.addWidget(self.label)
        #self.verticalLayoutProMgr.addSpacing(20)
        self.verticalLayoutProMgr.addWidget(self.tableViewProMgr)
        self.verticalLayoutProMgr.addLayout(self.horizontalLayoutProMgr)
        
        #Set mainlayout on simulation
        simulation.setLayout(self.mainLayout)
        #Setting margin and spacing
        self.mainLayout.setMargin(50)
        #Pyuic4 auto-generated code
        self.retranslateUi(simulation)
       
        # My preferences
        self.connect(self.unitsComboBox, QtCore.SIGNAL("activated(QString)"),self.changeUnit)
        self.connect(self.add, QtCore.SIGNAL("clicked()"), self.addRow)
        self.connect(self.delete, QtCore.SIGNAL("clicked()"), self.deleteRow)
        self.connect(self.tableView,QtCore.SIGNAL("deleteProcess()"),self.deleteRow)
        self.connect(self.spinBox_2,QtCore.SIGNAL("valueChanged(int)"),self.updateClock)
        self.connect(self.radioButton_Complex,QtCore.SIGNAL("toggled(bool)"),self.changeEnableState)
        self.connect(self.pushButton_clock,QtCore.SIGNAL("clicked()"),self.openClockEditor)
        self.connect(self.pushButton,QtCore.SIGNAL("clicked()"),self.addProfile)
        self.connect(self.pushButton_2,QtCore.SIGNAL("clicked()"),self.removeProfile)
        QtCore.QMetaObject.connectSlotsByName(simulation)
        
    def retranslateUi(self, simulation):
        """
        Function allowing naming of the different labels regardless of app's language.
        
        :param simulation: Visual frame to translate.
        :type simulation: :class:`.MyWidgetTabSimulation`
        """
        simulation.setWindowTitle(QtGui.QApplication.translate("simulation", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
        self.label_2.setText(QtGui.QApplication.translate("simulation", "Scenarios list :", None, QtGui.QApplication.UnicodeUTF8))
        self.add.setText(QtGui.QApplication.translate("simulation", "Add", None, QtGui.QApplication.UnicodeUTF8))
        self.delete.setText(QtGui.QApplication.translate("simulation", "Delete", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.setText(QtGui.QApplication.translate("Dialog", "Add profile", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_2.setText(QtGui.QApplication.translate("Dialog", "Remove profile", None, QtGui.QApplication.UnicodeUTF8))
        
    def addRow(self):
        '''
        Adds a new scenario.
        '''
        if self.tableView.state() == QtGui.QAbstractItemView.EditingState:
            self.tableView.closePersistentEditor( self.tableView.currentIndex() )
        if self.tableView.selectedIndexes() and len(self.tableView.selectedIndexes()) == 1:
            indexToEdit = self.tableView.selectedIndexes()[0].row()
            self.tableView.model().insertRow(indexToEdit, self.tableView.rootIndex(),True,"New_scenario")
            self.tableView.setCurrentIndex(self.tableView.model().index(indexToEdit+1,0))
            self.tableView.edit(self.tableView.model().index(indexToEdit+1,0))
            return
        indexToEdit = self.tableView.model().rowCount()
        self.tableView.model().insertRow(indexToEdit, self.tableView.rootIndex(),True,"New_scenario")
        self.tableView.setCurrentIndex(self.tableView.model().index(indexToEdit,0))
        self.tableView.edit(self.tableView.model().index(indexToEdit,0))
    
    def deleteRow(self):
        '''
        Deletes the currently selected scenario(s).
        '''
        if len(self.tableView.selectedIndexes()) > 1:
            #Make sure its not two indexes on the same columns
            if len(set([index.row() for index in self.tableView.selectedIndexes()])) == 1:
                index = self.tableView.selectedIndexes()[0]
                self.tableView.model().removeRow(index.row(),True)
                self.tableView.clearSelection()
                return
            self.tableView.model().specialRemove(list(set([index.row() for index in self.tableView.selectedIndexes()])),True)
            self.tableView.clearSelection()
            return
        
        elif len(self.tableView.selectedIndexes()):
            index = self.tableView.selectedIndexes()[0]
            self.tableView.model().removeRow(index.row(),True)
            self.tableView.clearSelection()
    
    def updateClock(self):
        '''
        Tells the model to modify the dom of the clock when user sets the clock to a fixed value.
        '''
        if not self.tableView.model() is None:
            self.tableView.model().setFixedClockValue(str(self.spinBox_2.value()))

    def changeEnableState(self,state):
        '''
        Add or disable widgets depending of which radioButton is selected.
        
        :param state: State of the complex radio Button.
        :type state: Boolean
        '''
        self.spinBox_2.setEnabled(not state)
        self.pushButton_clock.setEnabled(state)
        if not state:
            self.tableView.model().setFixedClockValue(self.spinBox_2.value())
            
    def openClockEditor(self):
        '''
        Opens clock's tree.
        '''
        clockNode = self.tableView.model().clockNode
        if clockNode.elementsByTagName("PrimitiveTree").item(0).firstChild().isNull:
            newNothingElement = clockNode.ownerDocument().createElement("Control_Nothing")
            clockNode.elementsByTagName("PrimitiveTree").item(0).appendChild(newNothingElement)
        editor = MainEditorWindow(clockNode.elementsByTagName("PrimitiveTree").item(0).firstChild(),self.parent,"Clock")
        editor.setWindowModality(QtCore.Qt.WindowModal)
        editor.exec_()

    def addProfile(self):
        '''
        Adds a profile to self.tableViewProMgr's model.
        '''
        if self.tableViewProMgr.state() == QtGui.QTableView.EditingState:
            return
        self.tableViewProMgr.model().insertRow(self.tableViewProMgr.model().rowCount())
        self.tableViewProMgr.edit(self.tableViewProMgr.model().index(self.tableViewProMgr.model().rowCount()-1,0))
        
    def removeProfile(self):
        '''
        Deletes the currently selected profile(s).
        '''
        if len(self.tableViewProMgr.selectedIndexes()) > 1:
            self.tableViewProMgr.model().specialRemove([index.row() for index in self.tableViewProMgr.selectedIndexes()])
            self.tableViewProMgr.clearSelection()
        
        elif len(self.tableViewProMgr.selectedIndexes()):
            index = self.tableViewProMgr.selectedIndexes()[0]
            self.tableViewProMgr.model().removeRow(index.row())
            self.tableViewProMgr.clearSelection()

    def changeUnit(self,units):
        '''
        Changes clock units.
        
        :param units: New units type.
        :type units: String
        '''
        clockNode = self.tableView.model().clockNode
        clockNode.setAttribute("units",units)
        
class ArrowsAwareTableView(QtGui.QTableView):
    '''
    This class slightly modify Qt's QTableView class.
    Navigating the TableView with arrows will generate the same signal as if the user was using the mouse buttons.
    This way, previews will be generated like the user had clicked in the table view.
    '''
    def __init__(self):
        '''
        Constructor.
        '''
        QtGui.QTableView.__init__(self)
        
    def keyPressEvent(self,event):
        '''
        Reimplementation of QTableView's keyPressEvent function.
        
        :param event: see QTableView's documentation for more information
        '''
        super(ArrowsAwareTableView, self).keyPressEvent(event)
        if event.key() == QtCore.Qt.Key_Delete and not self.state() == QtGui.QAbstractItemView.EditingState:
            self.emit(QtCore.SIGNAL("deleteProcess()"))
