"""
.. module:: ProfileManager

.. codeauthor::  Mathieu Gagnon <mathieu.gagnon.10@ulaval.ca>

:Created on: 2010-04-27

"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PrrofileManager_new.ui'
#
# Created: Tue Apr 27 15:44:46 2010
#      by: PyQt4 UI code generator 4.7
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui
from frame.CopyWizard import Ui_Dialog as CopyDialog
from frame.ProfileAdder import Ui_Form as AddProfileDialog
from model.ProfileManagerModel import ProfileManagerModel
from model.baseVarModel import GeneratorBaseModel

class Ui_Dialog(object):
    '''
    This class is an automatically generated python file using the pyuic4 program and .ui file generated by Qt_Designer.
    This class is a Dialog in which the user can manage its profile(Copy, Delete or Add profiles and elements of them).
    '''
    def __init__(self, parent):
        '''
        Constructor
        
        :param parent: population tab
        '''
        self.parent = parent
        self.baseModel = GeneratorBaseModel()
        
    def setupUi(self, Dialog):
        """
        Creates the widgets that will be displayed on the frame.
        
        :param Dialog: Visual frame when editing profiles.
        :type Dialog: :class:`.MyWidgetProfileManager`
        """
        Dialog.setObjectName("Dialog")
        
        self.layoutLeftPart = QtGui.QVBoxLayout()
        self.layoutCentral = QtGui.QHBoxLayout()
        self.mainLayout = QtGui.QVBoxLayout()
        
        self.label = QtGui.QLabel("Available profiles :")
        self.label.setFixedSize(150,20)
        
        self.buttonBox = QtGui.QDialogButtonBox(Dialog)
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel|QtGui.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        
        #Profile list view
        self.listView = QtGui.QListView()
        self.listView.setObjectName("listView")
        #self.listView.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
        self.model = ProfileManagerModel(self)
        self.listView.setModel(self.model)
        self.listView.setMinimumWidth(200)
        self.listView.setMaximumSize(300,500)
        #PushButtons
        self.pushButton_2 = QtGui.QPushButton()
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setFixedSize(180,25)
        self.pushButton_remove = QtGui.QPushButton("Remove profile")
        self.pushButton_remove.setFixedSize(180,25)
        self.pushButton_3 = QtGui.QPushButton()
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setFixedSize(180,25)
        self.pushButton_4 = QtGui.QPushButton()
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setFixedSize(180,25)
        self.pushButton = QtGui.QPushButton()
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setFixedSize(180,25)
        self.pushButton_emptyProfile = QtGui.QPushButton("Add empty profile")
        self.pushButton_emptyProfile.setFixedSize(180,25)
        #Build left layout
        self.layoutLeftPart.addWidget(self.label)
        self.layoutLeftPart.addWidget(self.listView)
        self.layoutLeftPart.addWidget(self.pushButton_2)
        self.layoutLeftPart.addWidget(self.pushButton_emptyProfile)
        self.layoutLeftPart.addWidget(self.pushButton_remove)
        self.layoutLeftPart.addWidget(self.pushButton_3)
        self.layoutLeftPart.addWidget(self.pushButton_4)
        self.layoutLeftPart.addWidget(self.pushButton)
        
        #Build MainLayout
        self.layoutCentral.addLayout(self.layoutLeftPart)
        widgetFill = QtGui.QWidget()
        self.layoutCentral.addWidget(widgetFill)
        widgetFill.setMinimumWidth(200)
        widgetFill.setMaximumSize(300,500)
        widgetFill.setSizePolicy(QtGui.QSizePolicy.Expanding,QtGui.QSizePolicy.Expanding)
        self.layoutLeftPart.setAlignment(QtCore.Qt.AlignCenter)
        #Main Layout
        self.mainLayout.addLayout(self.layoutCentral)
        self.mainLayout.addSpacing(50)
        self.mainLayout.addWidget(self.buttonBox)
        Dialog.setLayout(self.mainLayout)
        
        self.retranslateUi(Dialog)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("accepted()"), Dialog.accept)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("rejected()"), Dialog.reject)
        QtCore.QObject.connect(self.pushButton_4,QtCore.SIGNAL("clicked()"),self.copyAcceptFunc)
        QtCore.QObject.connect(self.pushButton,QtCore.SIGNAL("clicked()"),self.copySimVar)
        QtCore.QObject.connect(self.pushButton_2,QtCore.SIGNAL("clicked()"),self.addProfile)
        QtCore.QObject.connect(self.pushButton_emptyProfile,QtCore.SIGNAL("clicked()"),self.addEmptyProfile)
        QtCore.QObject.connect(self.pushButton_3,QtCore.SIGNAL("clicked()"),self.cloneProfile)
        QtCore.QObject.connect(self.pushButton_remove,QtCore.SIGNAL("clicked()"),self.removeProfile)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        '''
        Function allowing naming of the different labels regardless of app's language.
        
        :param Dialog: Visual frame.
        :type Dialog: :class:`.MyWidgetProfileManager`
        '''
        Dialog.setWindowTitle(QtGui.QApplication.translate("Dialog", "LSD - Profile manager", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_2.setText(QtGui.QApplication.translate("Dialog", "Add from demography", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_3.setText(QtGui.QApplication.translate("Dialog", "Clone profile", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_4.setText(QtGui.QApplication.translate("Dialog", "Copy accept function", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.setText(QtGui.QApplication.translate("Dialog", "Copy simulation variables", None, QtGui.QApplication.UnicodeUTF8))

    def copyAcceptFunc(self):
        '''
        Copy an accept function between two different profiles.
        '''
        if self.listView.selectedIndexes():
            profileCopyFrom = self.listView.model().getProfileFromIndex(self.listView.selectedIndexes()[0])
            CpyDlg = MyWidgetCopyDialog(self, "Accept function", self.listView.model().getProfileFromIndex(self.listView.selectedIndexes()[0]))
            CpyDlg.exec_()
            for i in range(CpyDlg.listWidget.count()):
                currProfileModified = CpyDlg.listWidget.item(i).data(QtCore.Qt.DisplayRole)
                self.baseModel.replaceAcceptFunction(currProfileModified, profileCopyFrom)
        else:
            QtGui.QMessageBox().information(self, "Accept function copy", "Choose a process in the list before performing this action!")
        
    def copySimVar(self):
        '''
        Copy an simulation variables between two different profiles.
        '''
        if self.listView.selectedIndexes():
            profileCopyFrom = self.listView.model().getProfileFromIndex(self.listView.selectedIndexes()[0])
            CpyDlg = MyWidgetCopyDialog(self, "simulation variables", profileCopyFrom)
            CpyDlg.exec_()
            for i in range(CpyDlg.listWidget.count()):
                currProfileModified = CpyDlg.listWidget.item(i).data(QtCore.Qt.DisplayRole)
                self.baseModel.replaceSimulationVariables(currProfileModified, profileCopyFrom)
        else:
            QtGui.QMessageBox().information(self, "Simulation variables copy", "Choose a process in the list before performing this action!")
        
    def addProfile(self):
        '''
        Open the demography dialog and add new profile if user goes through all the steps.
        '''
        addProfileWizard = MyWidgetAddProfile(self)
        for i in self.baseModel.profileDict.keys():
            addProfileWizard.comboBox_acceptFunction.addItem(i)
            addProfileWizard.comboBox_simVariable.addItem(i)
        addProfileWizard.comboBox_acceptFunction.setCurrentIndex(addProfileWizard.comboBox_acceptFunction.findText(""))
        addProfileWizard.comboBox_simVariable.setCurrentIndex(addProfileWizard.comboBox_simVariable.findText(""))
        addProfileWizard.exec_()
        if addProfileWizard.result():
            profileName = addProfileWizard.lineEdit_name.text()
            simVarFrom = addProfileWizard.comboBox_simVariable.currentText()
            acceptFuncFrom = addProfileWizard.comboBox_acceptFunction.currentText()
            demoFile = addProfileWizard.tableWidget.currentItem().data(QtCore.Qt.UserRole)
            #Collecting Info to insert profile correctly
            parentIndex = self.listView.rootIndex()
            row = self.listView.model().rowCount()
            self.listView.model().insertProfile(parentIndex,row,profileName,demoFile,simVarFrom,acceptFuncFrom)
            self.parent.comboBox.addItem("Profile named : "+profileName, profileName)
            
    def addEmptyProfile(self):
        '''
        Ask for profile name and add it to the profile list(no demography, no other variables)
        '''
        newProfile, result = QtGui.QInputDialog.getText(self,"Empty profile","New profile's name ")
        if result:
            parentIndex = self.listView.rootIndex()
            row = self.listView.model().rowCount()
            self.listView.model().insertProfile(parentIndex,row,newProfile)
            self.parent.comboBox.addItem("Profile named : "+newProfile, newProfile)
            
    def removeProfile(self):
        '''
        Remove the selected profile from model.
        '''
        if self.listView.selectedIndexes():
            #Collecting Info to remove Profile correctly
            profileRemovedName = self.listView.model().getProfileFromIndex(self.listView.selectedIndexes()[0])
            parentIndex = self.listView.rootIndex()
            row = self.listView.selectedIndexes()[0].row()
            self.listView.model().removeProfile(parentIndex,row)
            self.parent.comboBox.removeItem(self.parent.comboBox.findData(profileRemovedName))
            QtGui.QApplication.instance().window.simTab.tableViewProMgr.model().reset()
            
            
    def cloneProfile(self):
        '''
        Create new profile by cloning an other profile.
        '''
        if self.listView.selectedIndexes():
            cloneName,result = QtGui.QInputDialog.getText(self, "Clone Profile", "Clone's name")
            if result:
                if cloneName in self.baseModel.profileDict.keys():
                    QtGui.QMessageBox().information(self, "Clone name","A profile with that name already exists. Choose another name.")
                    self.cloneProfile()
                else:
                    self.listView.model().cloneProfile(cloneName, self.listView.model().getProfileFromIndex(self.listView.currentIndex()))
                    self.parent.comboBox.addItem("Profile named : "+cloneName, cloneName)
        else:
            QtGui.QMessageBox().information(self, "Clone name","Choose a process in the list before performing this action!")
            
class MyWidgetCopyDialog(QtGui.QDialog, CopyDialog):
    '''
    Transforms the class in the generated python file in an executable dialog.
    This class allow a user to copy data from and to profiles.
    '''
    def __init__(self, parent, objectCopied, profileName):      
        QtGui.QDialog.__init__(self)
        CopyDialog.__init__(self,parent,objectCopied,profileName)
        self.setupUi(self)

class MyWidgetAddProfile(QtGui.QDialog, AddProfileDialog):
    '''
    Transforms the class in the generated python file in an executable dialog.
    This class allow a user to create a new profile.
    '''
    def __init__(self, parent):
        QtGui.QDialog.__init__(self)
        AddProfileDialog.__init__(self, parent)
        self.setupUi(self)
        
